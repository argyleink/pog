#!/usr/bin/env node


// MODULE DENEPDENCIES
var mkdirp = require('mkdirp'),
    colors = require('colors'),
    exec = require('child_process').exec,
    fs = require('fs'),
    ncp = require('ncp').ncp,
    os = require('os'),
    pkg = require('../package.json'),
    program = require('commander'),
    spawn = require('child_process').spawn,
    version = pkg.version;


// CLI
program
  .version(version)
  .usage('[options] [dir]')
  .option('-H, --html <template>', 'set html teplating engine: ejs|hjs|jshtml}hogan|jade (default)')
  .option('-C, --css <engine>', 'add stylesheet <engine> support (less|stylus) (defaults to plain css)')
  .option('-F, --force', 'force on non-empty directory')
  .option('start', 'start the web server (still a bit buggy, best just just run "grunt" or "gulp" for now)')
  .option('generate', 'generate new model + controller with basic CRUD functionality')
  // FE FRAMEWORKS
  .option('--angular', 'add support for angular')
  .option('--backbone', 'add support for backbone')
  .option('--ember', 'add support for ember')
  // JS LIBRARIES
  .option('--jquery', 'add support for jquery')
  .option('--zepto', 'add support for zepto')
  .option('--modernizr', 'add support for modernizr')
  // PREPROCESSOR LIBRARIES
  .option('--axis', 'add axis support to stylus')
  .option('--bourbon', 'add nib support to stylus')
  .option('--nib', 'add nib support to stylus')
  // CSS FRAMEWORKS
  .option('--bootstrap', 'add support for bootstrap')
  .option('--foundation', 'add support for foundation')
  .option('--gumby', 'add support for gumby')
  .option('--skeleton', 'add support for skeleton')
  // DATABASES
  .option('--db <type>', 'mongo|mysql|parse|postgress|sqlite')
  .parse(process.argv);


// PATH
var path = program.args.shift() || '.';

// end-of-line code
var eol = os.EOL

// SET TEMPLATE ENGINE
program.template = 'jade'; // JADE
if ( program.html === 'ejs' ) program.template = 'ejs'; // EJS
if ( program.html === 'hogan' ) program.template = 'hogan'; // HOGAN
if ( program.html === 'handlebars' ) program.template = 'handlebars';  // HANDLEBARS
if ( program.html === 'mustache' ) program.template = 'mustache';  // MUSTACHE



// SCAFFOLDING FOR MODELS/CONTROLLERS
if (program.generate) {

    var name = path,
        pkgFile = './package.json';
        fileContent = fs.readFileSync(pkgFile),
        pkg = JSON.parse(fileContent),
        appName = pkg.name,
        templates = './lib/templates/';
        modelDir = './app/models/',
        modelFile = 'model.js',
        controllerDir = './app/controllers/',
        controllerFile = 'controller.js';

    // OVERRIDE FILE NAME IF WE'RE USING PARSE
    if ( program.db === 'parse' ) {
      modelFile = 'model.parse.js';
      controllerFile = 'controller.parse.js';
    }

    // UPDATE MODEL
    fs.readFile( templates + modelFile , function (err, data) {

      if (err) {
          console.log(err);
      } else {
          data = data.toString();
          data = data.replace(new RegExp('{model}', 'g'), name);
          fs.writeFileSync(modelDir + name + 'Model.js', data);
      }

    });


    // UPDATE CONTROLLER
    fs.readFile( templates + controllerFile , function (err, data) {

        if (err) {
            console.log(err);
        } else {

            data = data.toString();
            data = data.replace(new RegExp('{model}', 'g'), name);

            fs.writeFileSync(controllerDir + name + 'Controller.js', data);
        }

    });

    process.on('exit', function(){
        console.log('');
        console.log('Success!'.white + ' Tesla has generated 2 new files for you:'.white);
        console.log('-> app/models/'.green + name.green + '.js'.green);
        console.log('-> app/controllers/'.green + name.green + 'Controller.js'.green);
        console.log('');
        console.log('The following URL\'s are now ready to use:'.white);
        console.log('-> '.blue + name.blue + '/all'.blue + '  list all items in collection/table'.grey);
        console.log('-> '.blue + name.blue + '/create'.blue + '  create new record'.grey);
        console.log('-> '.blue + name.blue + '/delete/:id'.blue + '  delete record with id ":id"'.grey);
        console.log('-> '.blue + name.blue + '/find'.blue + '  find items that match a query'.grey);
        console.log('-> '.blue + name.blue + '/update/:id'.blue + '  update item with id ":id"'.grey);
        console.log('');
        console.log('Be sure you set the schema for your model in '.white + 'app/models/'.blue + name.blue + '.js'.blue);
        console.log('');
        console.log('Check out the docs for help or more info: '.white + 'https://github.com/teslajs/tesla.js#working-with-data'.blue);
        console.log('');
    });

    return false;

} // END GENERATE


// START THE SERVER
if (program.start) {

  spawn('gulp').stdout.on('data', function (data) {
    console.log(data.toString());
  });

  return false;

} // END START


// BUILD APPLICATION
var build = require('./build')();
build.createApplication( program, path );