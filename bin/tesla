#!/usr/bin/env node


// MODULE DENEPDENCIES
var mkdirp = require('mkdirp'),
    ncp = require('ncp').ncp,
    program = require('commander'),
    pkg = require('../package.json'),
    version = pkg.version,
    os = require('os'),
    fs = require('fs');


// CLI
program
  .version(version)
  .usage('[options] [dir]')
  // .option('-s, --sessions', 'add session support')
  .option('-e, --ejs', 'add ejs engine support (defaults to jade)')
  .option('-J, --jshtml', 'add jshtml engine support (defaults to jade)')
  .option('-H, --hogan', 'add hogan.js engine support')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus) (defaults to plain css)')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);


// PATH
var path = program.args.shift() || '.';

// end-of-line code
var eol = os.EOL

// Template engine
program.template = 'jade';
if (program.ejs) program.template = 'ejs';
if (program.jshtml) program.template = 'jshtml';
if (program.hogan) program.template = 'hjs';


// Generate application

(function createApplication(path) {
    emptyDirectory(path, function(empty){
        if (empty || program.force) {
            createApplicationAt(path);
        } else {
            console.log();
            program.confirm('destination is not empty, continue? ', function(ok){
                if (ok) {
                    process.stdin.destroy();
                    createApplicationAt(path);
                } else {
                    abort('aborting');
                }
            });
        }
    });
})(path);

function cleanup() {


}



function rmdir(path) {
  if( fs.existsSync(path) ) {
    fs.readdirSync(path).forEach(function(file,index){
      var curPath = path + "/" + file;
      if(fs.statSync(curPath).isDirectory()) { // recurse
        rmdir(curPath);
      } else { // delete file
        fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(path);
  }
};



// NEEDS SOME UPDATE TO WORK WITH DYNAMIC ENGINES
function createApplicationAt(path) {

    console.log();
    process.on('exit', function(){

        // CLEANUP UNUSED FOLDERS
        rmdir(path + '/app/views.ejs');
        rmdir(path + '/app/views.jade');
        rmdir(path + '/app/views.jshtml');
        rmdir(path + '/app/views.hjs');
        rmdir(path + '/public/css.less');
        rmdir(path + '/public/css.sass');
        rmdir(path + '/public/css.stylus');

        // LET USER KNOW WE'RE DONE
        console.log();
        console.log('   install dependencies:');
        console.log('     $ cd %s && npm install', path);
        console.log();
        console.log('   run the app:');
        console.log('     $ grunt');
        console.log();
    });

    mkdir(path, function(){

        ncp(__dirname + '/_src', path, function (err) {

            // HANDLE ERRORS
            if (err) {
                return console.error(err);
            }

            // UPDATE PACKAGE FILE
            var pkgFile = path + '/package.json',
                fileContent = fs.readFileSync(pkgFile),
                pkg = JSON.parse(fileContent);


            // OPEN CONFIG FILE
            var cfgFile = path + '/config/config.js',
                cfg = fs.readFileSync( cfgFile ).toString();

            // UPDATE APP NAME
            cfg.replace( '{{name}}', path );
            pkg.name = path;


            // SET CSS ENGINE
            switch (program.css) {
                case 'sass':
                    pkg.dependencies.sass = 'latest';
                    cfg.replace( '{{css}}', 'sass' );
                    rmdir(path + '/public/css');
                    fs.renameSync(path + '/public/css.sass', path + '/public/css');
                case 'less':
                    pkg.dependencies.less = 'latest';
                    cfg.replace( '{{css}}', 'less' );
                    rmdir(path + '/public/css');
                    fs.renameSync(path + '/public/css.less', path + '/public/css');
                    break;
                case 'stylus':
                    pkg.dependencies.stylus = 'latest';
                    cfg.replace( '{{css}}', 'stylus' );
                    rmdir(path + '/public/css');
                    fs.renameSync(path + '/public/css.stylus', path + '/public/css');
                    break;
                default:
            }


            // SET TEMPLATING ENGINE
            switch (program.template) {
                case 'ejs':
                    pkg.dependencies.ejs = 'latest';
                    cfg.replace( '{{html}}', 'ejs' );
                    fs.renameSync(path + '/app/views.ejs', path + '/app/views');
                case 'jade':
                    pkg.dependencies.jade = 'latest';
                    cfg.replace( '{{html}}', 'jade' );
                    fs.renameSync(path + '/app/views.jade', path + '/app/views');
                    break;
                case 'jshtml':
                    pkg.dependencies['jshtml-express'] = 'latest';
                    cfg.replace( '{{html}}', 'jshtml' );
                    fs.renameSync(path + '/app/views.ejs', path + '/app/views');
                    break;
                case 'hjs':
                    pkg.dependencies['express-hogan'] = 'latest';
                    cfg.replace( '{{html}}', 'hjs' );
                    fs.renameSync(path + '/app/views.hjs', path + '/app/views');
                break;

            }


            // SAVE NEW SETTINGS
            fs.writeFileSync(cfgFile, cfg); // WRITE CONFIG FILE
            fs.writeFileSync(pkgFile, pkg); // WRITE PACKAGE FILE

            // REMOVE UNNEEDED FILES

        });
    });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}


/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}


/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}


/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}